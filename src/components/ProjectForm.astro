---
// No necesitamos getCategories ya que las categorías están en la enumeración

// Definir las categorías que coincidan con tu enumeración en Strapi
const services = [
  'Calderería',
  'Maestranza',
  'Obras Generales',
  'Montaje',
  'Mantención'
];
---

<form class="space-y-6 sm:space-y-8">
  <div class="space-y-4 sm:space-y-6">
    <!-- Título -->
    <div>
      <label for="title" class="block text-sm sm:text-base font-medium text-gray-700 mb-1">
        Título del Proyecto
      </label>
      <input
        type="text"
        id="title"
        name="title"
        class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#00263b] focus:border-[#00263b] outline-none transition-colors text-sm sm:text-base"
        required
      />
    </div>

    <!-- Descripción -->
    <div>
      <label for="description" class="block text-sm sm:text-base font-medium text-gray-700 mb-1">
        Descripción
      </label>
      <textarea
        id="description"
        name="description"
        rows="4"
        class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#00263b] focus:border-[#00263b] outline-none transition-colors text-sm sm:text-base"
        required
      ></textarea>
    </div>

    <!-- Cliente -->
    <div>
      <label for="client" class="block text-sm sm:text-base font-medium text-gray-700 mb-1">
        Cliente
      </label>
      <input
        type="text"
        id="client"
        name="client"
        class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#00263b] focus:border-[#00263b] outline-none transition-colors text-sm sm:text-base"
      />
    </div>

    <!-- Año -->
    <div>
      <label for="year" class="block text-sm sm:text-base font-medium text-gray-700 mb-1">
        Año
      </label>
      <input
        type="text"
        id="year"
        name="year"
        class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#00263b] focus:border-[#00263b] outline-none transition-colors text-sm sm:text-base"
        required
      />
    </div>

    <!-- Servicios -->
    <div>
      <label for="services" class="block text-sm sm:text-base font-medium text-gray-700 mb-1">
        Servicios
      </label>
      <select
        id="services"
        name="services"
        class="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#00263b] focus:border-[#00263b] outline-none transition-colors text-sm sm:text-base"
        required
      >
        <option value="">Selecciona un servicio</option>
        <option value="Calderería">Calderería</option>
        <option value="Maestranza">Maestranza</option>
        <option value="Obras Generales">Obras Generales</option>
        <option value="Montaje">Montaje</option>
        <option value="Mantención">Mantención</option>
      </select>
    </div>

    <!-- Imagen -->
    <div>
      <label for="image" class="block text-sm sm:text-base font-medium text-gray-700 mb-1">
        Imagen del Proyecto
      </label>
      <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg hover:border-[#00263b] transition-colors">
        <div class="space-y-2 text-center">
          <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
          <div class="flex text-sm sm:text-base text-gray-600">
            <label for="file-upload" class="relative cursor-pointer bg-white rounded-md font-medium text-[#00263b] hover:text-[#003a5c] focus-within:outline-none">
              <span>Sube un archivo</span>
              <input id="file-upload" name="file-upload" type="file" class="sr-only" accept="image/*" required />
            </label>
            <p class="pl-1">o arrastra y suelta</p>
          </div>
          <p class="text-xs sm:text-sm text-gray-500">PNG, JPG, GIF hasta 10MB</p>
        </div>
      </div>
    </div>

    <!-- Destacado -->
    <div class="flex items-center">
      <input
        type="checkbox"
        id="featured"
        name="featured"
        class="h-4 w-4 sm:h-5 sm:w-5 text-[#00263b] border-gray-300 rounded focus:ring-[#00263b]"
      />
      <label for="featured" class="ml-2 block text-sm sm:text-base text-gray-700">
        Marcar como proyecto destacado
      </label>
    </div>
  </div>

  <!-- Botones -->
  <div class="flex flex-col sm:flex-row gap-4 pt-4 sm:pt-6">
    <button
      type="submit"
      class="w-full sm:w-auto px-6 py-3 bg-[#00263b] text-white rounded-lg hover:bg-[#003a5c] transition-colors text-sm sm:text-base font-medium"
    >
      Crear Proyecto
    </button>
    <button
      type="button"
      class="w-full sm:w-auto px-6 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors text-sm sm:text-base font-medium"
    >
      Cancelar
    </button>
  </div>
</form>

<script>
  const form = document.getElementById('projectForm') as HTMLFormElement;
  const imageInput = document.getElementById('image') as HTMLInputElement;
  const imagePreview = document.getElementById('imagePreview');
  const previewImg = document.getElementById('previewImg') as HTMLImageElement;
  const removeImage = document.getElementById('removeImage');
  const description = document.getElementById('description') as HTMLTextAreaElement;
  const charCount = document.getElementById('charCount');

  // Previsualización de imagen
  imageInput?.addEventListener('change', (e) => {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (previewImg && imagePreview && e.target?.result) {
          previewImg.src = e.target.result as string;
          imagePreview.classList.remove('hidden');
        }
      };
      reader.readAsDataURL(file);
    }
  });

  // Eliminar imagen
  removeImage?.addEventListener('click', () => {
    if (imageInput && imagePreview) {
      imageInput.value = '';
      imagePreview.classList.add('hidden');
    }
  });

  // Contador de caracteres
  description?.addEventListener('input', (e) => {
    const target = e.target as HTMLTextAreaElement;
    if (charCount) {
      charCount.textContent = `${target.value.length}/500 caracteres`;
    }
  });

  // Drag and drop
  const dropZone = imageInput?.parentElement;
  dropZone?.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropZone.classList.add('border-[#fd7d1d]');
  });

  dropZone?.addEventListener('dragleave', () => {
    dropZone.classList.remove('border-[#fd7d1d]');
  });

  dropZone?.addEventListener('drop', (e) => {
    e.preventDefault();
    dropZone.classList.remove('border-[#fd7d1d]');
    
    if (imageInput && e.dataTransfer?.files.length) {
      imageInput.files = e.dataTransfer.files;
      const event = new Event('change');
      imageInput.dispatchEvent(event);
    }
  });

  // Manejo del formulario
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
      const formData = new FormData(form);
      
      // Estructura correcta para Strapi
      const projectData = {
        data: {
          title: formData.get('title'),
          description: [
            {
              type: 'paragraph',
              children: [
                { type: 'text', text: formData.get('description') as string }
              ]
            }
          ],
          services: formData.get('services'),
          year: formData.get('year'),
          client: formData.get('client') || '',
          featured: false
        }
      };

      console.log('Datos enviados:', JSON.stringify(projectData, null, 2));

      const response = await fetch(`${import.meta.env.PUBLIC_STRAPI_URL}/api/projects`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.PUBLIC_STRAPI_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(projectData)
      });

      const responseText = await response.text();
      console.log('Respuesta del servidor:', responseText);

      if (!response.ok) {
        throw new Error(`Error del servidor: ${response.status} ${response.statusText}\n${responseText}`);
      }

      const responseData = JSON.parse(responseText);
      
      // Si hay una imagen, la subimos después
      const imageFile = formData.get('image') as File;
      if (imageFile && imageFile.size > 0) {
        const imageFormData = new FormData();
        imageFormData.append('files', imageFile);
        imageFormData.append('ref', 'api::project.project');
        imageFormData.append('refId', responseData.data.id);
        imageFormData.append('field', 'image');

        const imageResponse = await fetch(`${import.meta.env.PUBLIC_STRAPI_URL}/api/upload`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${import.meta.env.PUBLIC_STRAPI_TOKEN}`
          },
          body: imageFormData
        });

        if (!imageResponse.ok) {
          console.error('Error al subir la imagen:', await imageResponse.text());
        }
      }

      alert('Proyecto creado exitosamente');
      window.location.href = '/admin/proyectos';
      
    } catch (error) {
      console.error('Error completo:', error);
      alert(`Error al crear el proyecto: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    }
  });
</script> 